/* SSL Folding Provider Thorough Test File;

/* Test 1: Basic :PROCEDURE block;
:PROCEDURE BasicProcedure;
    :DECLARE sVar;
    sVar := "Hello";
    :RETURN sVar;
:ENDPROC; /* Fold from :PROCEDURE to :ENDPROC;

/* Test 2: Basic :CLASS block;
:CLASS BasicClass;
    :DECLARE nMember;
    :PROCEDURE Init;
        nMember := 0;
    :ENDPROC;
:ENDCLASS; /* Fold from :CLASS to :ENDCLASS;

/* Test 3: :REGION blocks;
:REGION MainLogic;
    :DECLARE x;
    x := 10;
    /* region Inner calculations; commented out; /* Test editor comment region folding;
    :DECLARE y;
    y := x * 2;
    /* endregion;
:ENDREGION; /* Fold from :REGION to :ENDREGION;

/* Test 4: Control Structures - :IF/:ELSE/:ENDIF;
:PROCEDURE ConditionalTest; :PARAMETERS val;
    :IF val > 10;
        :RETURN "Greater";
    :ELSE;
        :RETURN "Equal";
    :ENDIF; /* Fold from :IF to :ENDIF;
:ENDPROC;

/* Test 5: Control Structures - :WHILE/:ENDWHILE;
:PROCEDURE WhileLoopTest;
    :DECLARE i := 0;
    :WHILE i < 5;
        i++;
    :ENDWHILE; /* Fold from :WHILE to :ENDWHILE;
:ENDPROC;

/* Test 6: Control Structures - :FOR/:NEXT;
:PROCEDURE ForLoopTest;
    :DECLARE sum := 0;
    :FOR i := 1 :TO 10;
        sum += i;
    :NEXT; /* Fold from :FOR to :NEXT;
:ENDPROC;

/* Test 7: Control Structures - :BEGINCASE/:CASE/:OTHERWISE/:ENDCASE;
:PROCEDURE CaseStructureTest; :PARAMETERS input;
    :BEGINCASE;
    :CASE input == "A";
        :RETURN 1;
    :CASE input == "B";
        :RETURN 2;
    :OTHERWISE;
        :RETURN 0;
    :ENDCASE; /* Fold from :BEGINCASE to :ENDCASE;
:ENDPROC;

/* Test 8: Error Handling - :TRY/:CATCH/:FINALLY/:ENDTRY;
:PROCEDURE ErrorHandlingTest;
    :TRY;
        DoProc("Risky");
    :CATCH e;
        LogError(e:Message);
    :FINALLY;
        CleanUp();
    :ENDTRY; /* Fold from :TRY to :ENDTRY;
:ENDPROC;

/* Test 10: :BEGININLINECODE/:ENDINLINECODE;
:BEGININLINECODE "MyJSCode" "JavaScript";
    // let x = 10;
    // console.log("Hello from inline JS");
:ENDINLINECODE; /* Fold from :BEGININLINECODE to :ENDINLINECODE;

/* Test 11: Nested Structures;
:CLASS NestedExampleClass;
    :DECLARE nOuterVar;
    :PROCEDURE OuterMethod;
        :IF nOuterVar > 0;
            :FOR i := 1 :TO nOuterVar;
                :TRY;
                    /* Some logic;
                :CATCH;
                                    /* Handle error;
                :ENDTRY;
            :NEXT;
        :ENDIF;
    :ENDPROC;
:ENDCLASS;

/* Test 12: Multiple blocks at the same level;
:PROCEDURE ProcOne;
:ENDPROC;

:PROCEDURE ProcTwo;
:ENDPROC;

:REGION RegionOne;
:ENDREGION;

:REGION RegionTwo;
:ENDREGION;

/* Test 13: Blocks with comments and blank lines;
:PROCEDURE CommentedProcedure;
    /* This is a comment;

    :DECLARE sMessage;
    /* Another comment;
    sMessage := "Test";

    /* Yet another comment;
:ENDPROC;

/* Test 14: Unclosed blocks (should not break folding for subsequent valid blocks);
:PROCEDURE UnclosedProc;
    :IF .T.;
        /* Missing :ENDIF;

:PROCEDURE FollowingProc; /* This should still fold correctly;
    :RETURN .T.;
:ENDPROC;

/* Test 15: Strings containing keywords - should not affect folding;
:PROCEDURE StringKeywordTest;
    :DECLARE sSQL, sComment;
    sSQL := "SELECT * FROM :TABLE_NAME WHERE ID = :ID_VALUE";
    sComment := "This is a :PROCEDURE keyword in a string, not a real block.";
    :IF sSQL != "";
        /* Do something;
    :ENDIF;
:ENDPROC;

/* Test 16: Special case for TRY-CATCH, TRY-FINALLY, TRY-CATCH-FINALLY;
:PROCEDURE TryCatchOnly;
    :TRY;
    :CATCH;
    :ENDTRY;
:ENDPROC;

:PROCEDURE TryFinallyOnly;
    :TRY;
    :FINALLY;
    :ENDTRY;
:ENDPROC;

/* Test 17: ACCESSOR/MUTATOR blocks within CLASS;
:CLASS AccessorMutatorClass;
    :DECLARE _propertyValue;
    :ACCESSOR MyProperty;
        :GET;
            :RETURN _propertyValue;
        :ENDGET; /* Fold :GET to :ENDGET;
        :SET (newValue);
            _propertyValue := newValue;
        :ENDSET; /* Fold :SET to :ENDSET;
    :ENDACCESSOR; /* Fold :ACCESSOR to :ENDACCESSOR;

    :MUTATOR OldStyleSetter :PARAMETERS val;
        _propertyValue := val;
    :ENDMUTATOR; /* Fold :MUTATOR to :ENDMUTATOR;
:ENDCLASS;

/* Test 18: Editor comment folding (e.g., /* region ... /* endregion );
/* region EditorFoldableRegion1;
:DECLARE editorFoldVar1;
/* endregion;

/* Test 19: Multiple nested regions;
:REGION OuterRegion;
    :REGION InnerRegion1;
        :DECLARE inner1Var;
    :ENDREGION;
    :REGION InnerRegion2;
        :DECLARE inner2Var;
        /* region DeeplyNestedCommentRegion;
        :DECLARE deepVar;
        /* endregion;
    :ENDREGION;
:ENDREGION;

/* Test 20: File starting or ending with a foldable block;
:PROCEDURE FirstProcInFile;
:ENDPROC;

/* (Ensure no extra lines after last ENDPROC if testing EOF handling);
/* End of Folding Provider Test File;
