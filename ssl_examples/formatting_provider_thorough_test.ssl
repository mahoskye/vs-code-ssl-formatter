/* SSL Formatting Provider Thorough Test File;

/* Test 1: Procedure and Declarations - Indentation and Colon Spacing;
:PROCEDURE MyProcedure:PARAMETERS param1,param2, param3 : DEFAULT param1 , "default" , param2 , 123
:DECLARE var1,var2 , var3
:DECLARE sString : STRING
:DECLARE nNumber:NUMBER
var1 :=param1+param2*param3
var2:="A string literal"
var3:= {1,2,3,4,5} /* Array literal with comma spacing;

/* Test 2: Conditional Statements - Indentation, Operator Spacing;
:IF var1>10.AND.var2=="Test"
    var1:=var1+1
    :IF param3 <0
        var2:="Negative"
    :ELSE
        var2:="Positive"
    :ENDIF
:ELSE
    var1 :=var1-1
:ENDIF

/* Test 3: Loop Constructs - Indentation;
:WHILE var1 > 0
    var1:=var1-1
    :IF var1 == 5 : EXITWHILE : ENDIF
:ENDWHILE

:FOR i:=1:TO Len(var3)
    var3[i] := var3[i]*2
    :IF i >100 : EXITFOR : ENDIF
:NEXT

/* Test 4: Case Statement - Indentation and Colon Spacing;
:BEGINCASE
:CASE var1 == 1
    var2:="One"
:CASE var1==2.OR.var1==3
    var2:="Two or Three"
:OTHERWISE
    var2:="Other"
:ENDCASE

/* Test 5: Error Handling - Indentation;
:TRY
    DoProc("RiskyOperation", {var1,var2})
:CATCH e
    LogError(e:Message)
:FINALLY
    var1:=0
:ENDTRY

/* Test 6: Class Definition - Indentation;
:CLASS MyClass : INHERIT BaseClass
:DECLARE instanceVar1, instanceVar2

:PROCEDURE Method1 :PARAMETERS p1
    instanceVar1:=p1
    :RETURN instanceVar1
:ENDPROC

:ACCESSOR PropertyName
    :GET
        :RETURN instanceVar2
    :SET (newValue)
        instanceVar2:=newValue
:ENDACCESSOR
:ENDCLASS

/* Test 7: Region Directive - Indentation;
:REGION UtilityFunctions;
:PROCEDURE Util1
    :RETURN .T.
:ENDPROC;
:ENDREGION;

/* Test 8: Inline Code - Indentation;
:BEGININLINECODE "MyInlineCode"
    /* This is some inline code;
    x := y + z;
:ENDINLINECODE

/* Test 9: Operator Spacing - various operators;
a:=1+2-3*4/5^6
b := c &&d || e
f <> g
h == i
j <= k >= l
sString := "hello"+" world"
nCount++
--nCount

/* Test 10: Comma Spacing;
arTest := {1,2,3,"a","b","c",.T.,.F.,NIL}
DoProc("TestProc", {arg1,arg2,arg3})

/* Test 11: Colon Spacing in various contexts;
obj:Property := value
obj:MethodCall(param:value)
label1: /* Label definition;

/* Test 12: Multi-line statement alignment (if supported by BlockAlignmentRule);
sLongString := "This is a very long string that might span " +
               "multiple lines and should be formatted " +
               "coherently."

nCalculation := (var1 + var2 + var3 + param1 + param2 +
                 param3) * 100 / 5

/* Test 13: Comments;
/* This is a block comment
   spanning multiple lines;
var1 := 10 /* This is an end-of-line comment;
    /* Indented comment;

/* Test 14: Mixed constructs and deeper nesting;
:PROCEDURE ComplexLogic :PARAMETERS dataObject
    :DECLARE isValid, i, item
    isValid := .F.
    :IF dataObject != NIL .AND. dataObject:HasKey("items")
        :FOR i := 1 :TO ASize(dataObject:items)
            item := dataObject:items[i]
            :IF item:type == "critical" .AND. item:value > 100
                :TRY
                    ProcessCriticalItem(item)
                    isValid := .T.
                :CATCH ex
                    LogError("Failed on critical item: " + ex:Message)
                    :RETURN .F. /* Early exit;
                :ENDTRY
            :ENDIF
        :NEXT
    :ENDIF
    :RETURN isValid
:ENDPROC

/* Test 15: Empty Blocks;
:PROCEDURE EmptyProc
:ENDPROC

:IF .T.
:ELSE
:ENDIF

:WHILE .F.
:ENDWHILE

/* Test 16: SQL Operations (if specific formatting applies);
arResults := SqlExecute("SELECT col1,col2 FROM myTable WHERE id=?id? AND name LIKE ?name?",{varId,sPattern})
LSearch("UPDATE otherTable SET value=?value? WHERE key=?key?",{newValue,searchKey})

/* End of Formatting Test File;
