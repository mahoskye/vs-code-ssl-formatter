/* SSL Completion Provider Thorough Test File;

/* Test 1: Global Scope - Keywords and Basic Declarations;
/* Type ':' here, expect :PROCEDURE, :CLASS, :DECLARE, :REGION, etc.;
:

:DECLARE globalVar1, globalVar2; /* Suggest variable types after comma or at start;
:DECLARE sGlobalString : /* Suggest STRING, NUMBER, ARRAY, OBJECT etc.;

/* Test 2: Inside Procedure Definition;
:PROCEDURE MyTestProcedure;
    /* Type ':' here, expect :PARAMETERS, :DEFAULT, :DECLARE, :IF, :WHILE, etc.;
    :
    :PARAMETERS p1, p2; /* Suggest types for p1, p2;
    :DEFAULT p1, "test", p2, /* Suggest literals like 123, .T., NIL, {};

    :DECLARE localVar1; /* Suggest types;
    :DECLARE nLocalNum : NUMBER;

    /* Test 3: Statement Keywords;
    /* Type ':' here, expect control flow, assignments etc.;
    :

    globalVar1 := /* Suggest globalVar1, globalVar2, p1, p2, localVar1, nLocalNum, functions, .T., .F., NIL;
    localVar1 := "hello" + /* Suggest variables, functions, string literals;    /* Test 4: Control Flow Keywords;
    :IF /* Suggest variables, .T., .F.;
    :IF globalVar1 > 10 .AND. /* Suggest .T., .F., variables;
        localVar1 := "Condition met";
    :ELSE
    :ENDIF

    :WHILE /* Suggest variables;
    :ENDWHILE

    :FOR i := 1 :TO /* Suggest Len(), variables, numbers;
    :NEXT

    :BEGINCASE /* Suggest variables;
    :CASE 1
    :OTHERWISE
    :ENDCASE

    :TRY
    :CATCH e /* Suggest variable name 'e' or nothing specific;
    :FINALLY
    :ENDTRY

    /* Test 5: Function Calls;
    /* Type 'Le' here, expect Len();
    Le
    nLen := Len( /* Suggest variables, string literals;

    /* Type 'Cr' here, expect CreateUDObject();
    Cr
    oObj := CreateUDObject( /* Suggest string literals for class name;

    /* Type 'DoP' here, expect DoProc();
    DoP
    DoProc( /* Suggest string literals for proc name, then { for params;    /* Test 6: Object Property and Method Access;
    oObj := CreateUDObject("MyClass");
    oObj: /* Expect properties/methods of MyClass if known, or generic suggestions;

    /* Test 7: Array Literals and Indexing;
    arTest := {1, "two", .T., /* Suggest NIL, {}, other literals;
    localVar1 := arTest[ /* Suggest numbers, variables;

    /* Test 8: Operators;
    nResult := 1 + /* Suggest numbers, variables;
    bResult := .T. .AND /* Suggest .T., .F., variables;

    /* Test 9: SQL Operations;
    arSql := SqlExecute("SELECT * FROM Users WHERE Name = ?Name?", /* Suggest {;
    arSql := SqlExecute("SELECT * FROM Users WHERE Name = ?Name?", { /* Suggest variable names for parameters;

    /* Test 10: Built-in Constants;
    bVal := .T /* Suggest .TRUE.;
    bVal := .F /* Suggest .FALSE.;
    nullVal := NI /* Suggest NIL;

    /* Test 11: Snippets (if any are defined);
    /* e.g., type 'proc', expect snippet for :PROCEDURE ... :ENDPROC;
    proc
    /* e.g., type 'if', expect snippet for :IF ... :ENDIF;
    if

    :RETURN /* Suggest variables, literals;
:ENDPROC

/* Test 12: Inside Class Definition;
:CLASS MyTestClass :INHERIT /* Suggest known class names;
    /* Type ':' here, expect :DECLARE, :PROCEDURE, :ACCESSOR, :MUTATOR;
    :
    :DECLARE memberVar1; /* Suggest types;

    :PROCEDURE ClassMethod;
        :PARAMETERS cp1;
        memberVar1 := cp1 + /* Suggest members, params, globals ;
        :RETURN memberVar1;
    :ENDPROC;

    :ACCESSOR MyProp;
        :GET
            :RETURN memberVar1;
        :ENDGET;
        :SET (value)
            memberVar1 := value;
        :ENDSET;
    :ENDACCESSOR;
:ENDCLASS;

/* Test 13: Region Directive ;
:REGION MyTestRegion;
    /* Code inside region, standard completions apply ;
    :DECLARE regVar;
:ENDREGION;

/* Test 14: Inline Code ;
:BEGININLINECODE "TestInlineJS" "JavaScript";
    // JavaScript code here, SSL completions should NOT be active
    // var x = 10;
:ENDINLINECODE;

/* Test 15: After specific keywords ;
:DEFAULT globalVar1, /* Expect literals ;
:PARAMETERS pTest : /* Expect types ;
:TO /* Expect numbers, Len(), variables ;

/* Test 16: Completion within comments or strings (should NOT trigger) ;
/* :IF this should not complete ;
sMyString := ":PROCEDURE this should not complete";

/* Test 17: Partial word completions ;
/* Type 'Proc' -> :PROCEDURE ;
/* Type 'Decl' -> :DECLARE ;
/* Type 'Str' -> STRING (for type declaration) ;

/* Test 18: Contextual keyword filtering ;
/* Inside :PROCEDURE, :CLASS should be low priority or absent ;
/* Globally, :PARAMETERS should be low priority or absent ;

/* Test 19: Completion for user-defined functions/procedures (if symbol table is used) ;
:PROCEDURE AnotherProc; :PARAMETERS x; :RETURN x*2; :ENDPROC;

:PROCEDURE CallAnother;
    localResult := An /* Expect AnotherProc ;
    localResult := AnotherProc( /* Expect parameters of AnotherProc if known ;
:ENDPROC;

/* Test 20: Completion for labels (if supported) ;
:LABEL MyJumpLabel;
Branch("LABEL M"); /* Expect MyJumpLabel ;

/* End of Completion Provider Test File ;
