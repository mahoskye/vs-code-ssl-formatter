/* SSL Language Sample
   This file demonstrates various features of the SSL language
   for testing parsing, highlighting, and diagnostics;

/* region STARLIMS Sample Code;

:PROCEDURE HelloWorld;
:PARAMETERS name;
:DECLARE greeting;

/* Initialize variables;
greeting := "Hello, " + name + "!";

/* Display the greeting;
:RETURN greeting;
:ENDPROC;

:PROCEDURE CalculateSum;
:PARAMETERS numbers;
:DECLARE sum, i, count;

/* Validate input;
:IF numbers = NIL .OR. Len(numbers) = 0;
    :RETURN 0;
:ENDIF;

/* Calculate sum of all numbers;
sum := 0;
count := Len(numbers);

:FOR i := 1 :TO count;
    sum += numbers[i];
:NEXT;

:RETURN sum;
:ENDPROC;

:PROCEDURE ProcessData;
:PARAMETERS data;
:DECLARE results, item, i;

/* Initialize array;
results := {};

/* Process each item;
:TRY;
    :FOR i := 1 :TO Len(data);
        /* Process item;
        item := DoProc("TransformItem", {data[i]});
        
        /* Add to results;
        results := {results, item};
    :NEXT;
:CATCH;
    /* Handle errors;
    results := {.F., "Error processing data"};
:ENDTRY;

:RETURN results;
:ENDPROC;

:PROCEDURE QueryDatabase;
:PARAMETERS filter;
:DECLARE results, query, params;

/* Build query;
query := "SELECT id, name, value FROM items WHERE category = ?category?";
params := {filter:category};

/* Add optional filters;
:IF filter:minValue != NIL;
    query := query + " AND value >= ?minValue?";
    params := {params, filter:minValue};
:ENDIF;

/* Execute query;
:TRY;
    results := SqlExecute(query, params);
:CATCH;
    results := NIL;
:ENDTRY;

:RETURN results;
:ENDPROC;

:CLASS ItemProcessor;
:INHERIT BaseProcessor;

:DECLARE items, count, lastProcessed;

:PROCEDURE Initialize;
:PARAMETERS options;
/* Initialize the processor;
items := {};
count := 0;
lastProcessed := {0, 0, 0}; /* Date placeholder;
:RETURN .T.;
:ENDPROC;

:PROCEDURE AddItem;
:PARAMETERS item;
/* Add item to the collection;
items := {items, item};
count += 1;
:RETURN count;
:ENDPROC;

:PROCEDURE ProcessItems;
/* Process all items in the collection;
:DECLARE i, result, processedCount;

processedCount := 0;

:BEGINCASE;
:CASE count = 0;
    result := "No items to process";
:CASE count > 100;
    result := "Too many items";
:OTHERWISE;
    :FOR i := 1 :TO count;
        :IF items[i]:isValid = .T.;
            DoProc("ProcessSingleItem", {items[i]});
            processedCount += 1;
        :ENDIF;
    :NEXT;
    
    result := "Processed " + processedCount + " items";
:ENDCASE;

lastProcessed := Today();
:RETURN result;
:ENDPROC;

/* endregion;
