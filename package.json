{
    "name": "vs-code-ssl-formatter",
    "displayName": "STARLIMS Scripting Language Formatter",
    "description": "Syntax highlighting, folding, and auto-completion for STARLIMS Scripting Language (SSL)",
    "version": "0.3.0",
    "engines": {
        "vscode": "^1.94.0"
    },
    "categories": [
        "Programming Languages",
        "Snippets"
    ],
    "keywords": [
        "ssl",
        "starlims",
        "formatter",
        "syntax",
        "highlighting"
    ],
    "publisher": "mahoskye",
    "repository": {
        "type": "git",
        "url": "https://github.com/mahoskye/vs-code-ssl-formatter.git"
    },
    "bugs": {
        "url": "https://github.com/mahoskye/vs-code-ssl-formatter/issues"
    },
    "homepage": "https://github.com/mahoskye/vs-code-ssl-formatter#readme",
    "contributes": {
        "languages": [
            {
                "id": "ssl",
                "aliases": [
                    "STARLIMS Scripting Language",
                    "ssl"
                ],
                "extensions": [
                    ".ssl",
                    ".ssl.txt"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "ssl",
                "scopeName": "source.ssl",
                "path": "./syntaxes/ssl.tmLanguage.json"
            }
        ],
        "configuration": [
            {
                "title": "SSL Formatter",
                "properties": {
                    "sslFormatter.completions": {
                        "type": "object",
                        "default": {
                            "Array Functions": [],
                            "Database Functions": [],
                            "ODBC Extensions": [],
                            "Runtime Functions to get/return a DATASET": [],
                            "Data Type Functions": [],
                            "Date Functions": [],
                            "E-mail Functions": [],
                            "File Manipulation Functions": [],
                            "FTP Functions": [],
                            "Logical Functions": [],
                            "Miscellaneous Functions": [
                                {
                                    "label": "exampleFunction()",
                                    "kind": "function",
                                    "detail": "This is a demonstration function",
                                    "documentation": "This function is used for demonstration purposes."
                                }
                            ],
                            "String Functions": [],
                            "Statements": [],
                            "Numeric Functions": [],
                            "Process Functions": [],
                            "Security Functions": [],
                            "Serial Communications Functions": [],
                            "UDP Functions": [],
                            "Internal Functions": [],
                            "Error Handling": [],
                            "Web Specific Functions": [],
                            "Operators": [],
                            "Literals": [],
                            "Snippets": [
                                {
                                    "label": "if-else",
                                    "kind": "snippet",
                                    "insertText": ":IF ${1:condition};\n\t${2:/* true branch;}\n:ELSE;\n\t${3:/* false branch;}\n:ENDIF;",
                                    "detail": "IF-ELSE statement",
                                    "documentation": "Creates an IF-ELSE conditional statement"
                                },
                                {
                                    "label": "while-loop",
                                    "kind": "snippet",
                                    "insertText": ":WHILE ${1:condition};\n\t${2:/* loop body;}\n:ENDWHILE;",
                                    "detail": "WHILE loop",
                                    "documentation": "Creates a WHILE loop"
                                },
                                {
                                    "label": "for-loop",
                                    "kind": "snippet",
                                    "insertText": ":FOR ${1:i} := ${2:1} :TO ${3:10};\n\t${4:/* loop body;}\n:NEXT;",
                                    "detail": "FOR loop",
                                    "documentation": "Creates a FOR loop"
                                },
                                {
                                    "label": "try-catch",
                                    "kind": "snippet",
                                    "insertText": ":TRY;\n\t${1:/* code that might throw;}\n:CATCH;\n\t${2:/* error handling;}\n:ENDTRY;",
                                    "detail": "TRY-CATCH block",
                                    "documentation": "Creates a TRY-CATCH error handling block"
                                },
                                {
                                    "label": "procedure",
                                    "kind": "snippet",
                                    "insertText": ":PROCEDURE ${1:ProcName};\n:PARAMETERS ${2:param1, param2};\n\t/* ${3:procedure body};\n:RETURN ${4:result};\n:ENDPROC;",
                                    "detail": "Procedure definition",
                                    "documentation": "Creates a procedure definition"
                                },
                                {
                                    "label": "case-switch",
                                    "kind": "snippet",
                                    "insertText": ":BEGINCASE;\n:CASE ${1:condition1};\n\t${2:/* case 1;}\n:CASE ${3:condition2};\n\t${4:/* case 2;}\n:OTHERWISE;\n\t${5:/* default case;}\n:ENDCASE;",
                                    "detail": "CASE statement",
                                    "documentation": "Creates a CASE switch statement"
                                },
                                {
                                    "label": "declare-vars",
                                    "kind": "snippet",
                                    "insertText": ":DECLARE ${1:variable1}, ${2:variable2};",
                                    "detail": "Variable declaration",
                                    "documentation": "Declares variables"
                                },
                                {
                                    "label": "class-definition",
                                    "kind": "snippet",
                                    "insertText": ":CLASS ${1:ClassName};\n:INHERIT ${2:ParentClass};\n\n:DECLARE ${3:field1}, ${4:field2};\n\n:PROCEDURE ${5:MethodName};\n:PARAMETERS ${6:param1};\n\t${7:/* method body;}\n:RETURN ${8:result};\n:ENDPROC;",
                                    "detail": "Class definition",
                                    "documentation": "Creates a class definition with inheritance and methods"
                                },
                                {
                                    "label": "error-handling",
                                    "kind": "snippet",
                                    "insertText": ":ERROR;\n\t${1:/* error handling code;}\n:RETURN ${2:result};",
                                    "detail": "Error handling block",
                                    "documentation": "Creates an error handling block"
                                },
                                {
                                    "label": "region",
                                    "kind": "snippet",
                                    "insertText": "/* region ${1:RegionName};\n\t${2:/* code here;}\n/* endregion;",
                                    "detail": "Code region",
                                    "documentation": "Creates a collapsible code region"
                                }
                            ]
                        },
                        "description": "Custom completions for SSL"
                    },
                    "sslFormatter.debug.showTableView": {
                        "type": "boolean",
                        "default": true,
                        "description": "Show table view in debug output"
                    },
                    "sslFormatter.debug.showDetailedView": {
                        "type": "boolean",
                        "default": true,
                        "description": "Show detailed view in debug output"
                    },
                    "sslFormatter.debug.showInsights": {
                        "type": "boolean",
                        "default": true,
                        "description": "Show formatter insights in debug output"
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "sslFormatter.reloadCompletions",
                "title": "Reload SSL Completions"
            }
        ]
    },
    "main": "./out/src/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "jest --bail",
        "test:all": "jest --bail",
        "test:first-fail": "jest --runInBand --bail",
        "test:core": "jest --testPathPattern=test/core",
        "test:tokenizer": "jest --testPathPattern=tokenizer.test",
        "test:parser": "jest --testPathPattern=parser.test",
        "test:providers": "jest --testPathPattern=test/(bracketMatchingProvider|completionProvider|foldingProvider|hoverProvider)",
        "test:bracketMatching": "jest --testPathPattern=bracketMatchingProvider",
        "test:completion": "jest --testPathPattern=completionProvider",
        "test:folding": "jest --testPathPattern=foldingProvider",
        "test:hover": "jest --testPathPattern=hoverProvider",
        "test:formatting": "jest --testPathPattern=test/formattingProvider",
        "test:blockAlignment": "jest --testPathPattern=blockAlignmentRules.test",
        "test:formattingProvider": "jest --testPathPattern=formattingProvider.test",
        "test:colonSpacing": "jest --testPathPattern=colonSpacingRules.test",
        "test:commaSpacing": "jest --testPathPattern=commaSpacingRules.test",
        "test:commentFormatting": "jest --testPathPattern=commentFormattingRules.test",
        "test:formattingOptions": "jest --testPathPattern=formattingOptions.test",
        "test:indentation": "jest --testPathPattern=indentationRules.test",
        "test:integration": "jest --testPathPattern=integrationTests.test",
        "test:operatorSpacing": "jest --testPathPattern=operatorSpacingRules.test",
        "test:individual": "jest --bail --testPathPattern=${1}",
        "test:suite": "jest --bail --testPathPattern=${1}",
        "test:file": "jest --bail --testPathPattern=${1}"
    },
    "devDependencies": {
        "@types/glob": "^8.1.0",
        "@types/jest": "^29.5.14",
        "@types/node": "^22.7.5",
        "@types/vscode": "^1.94.0",
        "@typescript-eslint/eslint-plugin": "^5.59.1",
        "@typescript-eslint/parser": "^5.59.1",
        "eslint": "^8.39.0",
        "glob": "^11.0.0",
        "jest": "^29.7.0",
        "ts-jest": "^29.1.1",
        "typescript": "~5.1.6",
        "vscode-test": "^1.6.1"
    },
    "prettier": {
        "printWidth": 100,
        "tabWidth": 4
    }
}
