{
    "name": "STARLIMS Scripting Language",
    "scopeName": "source.ssl",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#code-blocks" },
        { "include": "#arrays" },
        { "include": "#numbers" },
        { "include": "#built-in-literals" },
        { "include": "#keywords" },
        { "include": "#functions" },
        { "include": "#method-calls" },
        { "include": "#property-access" },
        { "include": "#operators" },
        { "include": "#logical-operators" },
        { "include": "#comparison-operators" },
        { "include": "#assignment-operators" },
        { "include": "#increment-operators" },
        { "include": "#unary-operators" },
        { "include": "#indexers" },
        { "include": "#variables" }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.ssl",
                    "match": "(?i)(?<!\\w)(:IF|:ELSE|:ENDIF)\\b"
                },
                {
                    "name": "keyword.control.loop.ssl",
                    "match": "(?i)(?<!\\w)(:WHILE|:ENDWHILE|:EXITWHILE|:FOR|:TO|:NEXT|:EXITFOR|:LOOP)\\b"
                },
                {
                    "name": "keyword.control.case.ssl",
                    "match": "(?i)(?<!\\w)(:BEGINCASE|:CASE|:OTHERWISE|:EXITCASE|:ENDCASE)\\b"
                },
                {
                    "name": "keyword.control.exception.ssl",
                    "match": "(?i)(?<!\\w)(:TRY|:CATCH|:FINALLY|:ENDTRY|:ERROR)\\b"
                },
                {
                    "name": "keyword.control.flow.ssl",
                    "match": "(?i)(?<!\\w)(:RETURN|:LABEL)\\b"
                },
                {
                    "name": "keyword.declaration.ssl",
                    "match": "(?i)(?<!\\w)(:DECLARE|:PARAMETERS|:DEFAULT|:PUBLIC|:INCLUDE)\\b"
                },
                {
                    "name": "keyword.procedure.ssl",
                    "match": "(?i)(?<!\\w)(:PROCEDURE|:ENDPROC)\\b"
                },
                {
                    "name": "keyword.class.ssl",
                    "match": "(?i)(?<!\\w)(:CLASS|:INHERIT)\\b"
                },
                {
                    "name": "keyword.region.ssl",
                    "match": "(?i)(?<!\\w)(:REGION|:ENDREGION|:BEGININLINECODE|:ENDINLINECODE)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.ssl",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [{ "include": "#sql-parameters-internal" }]
                },
                {
                    "name": "string.quoted.single.ssl",
                    "begin": "'",
                    "end": "'",
                    "patterns": [{ "include": "#sql-parameters-internal" }]
                },
                {
                    "name": "string.quoted.bracket.ssl",
                    "begin": "\\[",
                    "end": "\\]",
                    "contentName": "string.quoted.bracket.content.ssl",
                    "patterns": [{ "include": "#sql-parameters-internal" }]
                }
            ]
        },
        "sql-parameters-internal": {
            "patterns": [
                {
                    "name": "meta.sql-parameter.named.ssl",
                    "match": "(\\?)([a-zA-Z_][a-zA-Z0-9_]*)(\\?)",
                    "captures": {
                        "1": { "name": "punctuation.definition.sql-parameter.begin.ssl" },
                        "2": { "name": "variable.parameter.sql.ssl" },
                        "3": { "name": "punctuation.definition.sql-parameter.end.ssl" }
                    }
                },
                {
                    "name": "constant.character.sql.parameter.placeholder.ssl",
                    "match": "(?<![a-zA-Z0-9_\\?])\\?(?![a-zA-Z0-9_\\?])"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.region.ssl",
                    "begin": "(?i)/\\*\\s*(region|endregion)\\b",
                    "end": ";",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.comment.begin.ssl" },
                        "1": { "name": "keyword.control.region.ssl" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.comment.end.ssl" }
                    }
                },
                {
                    "name": "comment.block.ssl",
                    "begin": "/\\*",
                    "end": ";",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.comment.begin.ssl" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.comment.end.ssl" }
                    }
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "support.function.special.ssl",
                    "match": "(?i)\\b(DoProc|ExecFunction|ExecUDF|Branch)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.database.ssl",
                    "match": "(?i)\\b(SqlExecute|LSearch)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.object.ssl",
                    "match": "(?i)\\b(CreateUDObject)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.bitwise.ssl",
                    "match": "(?i)\\b(_AND|_OR|_NOT|_XOR)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.builtin.ssl",
                    "match": "(?i)\\b(Len|CtoD|Today|Now|Upper|Lower|Left|Right|Mid|Trim|Val|Str|IsNil|Type|Empty|DtoC|CtoN|NtoC|Time|Year|Month|Day|Hour|Minute|Second|Chr|Asc|InStr|SubStr|Replace|LimsString|Date|Validate|IIF)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.math.ssl",
                    "match": "(?i)\\b(Int|Round|Abs|Max|Min|Mod|Sqrt|Power|Log|Exp|Sin|Cos|Tan|ASin|ACos|ATan|ATan2|Ceiling|Floor|Rand|RandSeed)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.array.ssl",
                    "match": "(?i)\\b(ASize|ADel|AIns|AScan|ASort|ACopy|AClone|AEval|AAdd)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "support.function.file.ssl",
                    "match": "(?i)\\b(FileExists|FileDelete|FileCopy|FileMove|FileSize|FileTime|DirExists|DirCreate|DirDelete|GetFiles|GetDirs)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.ssl" }
                    }
                },
                {
                    "name": "meta.function-call.general.ssl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "support.function.name.general.ssl" }
                    }
                }
            ]
        },
        "arrays": {
            "patterns": [
                {
                    "name": "meta.array.literal.ssl",
                    "begin": "\\{",
                    "end": "\\}",
                    "beginCaptures": { "0": { "name": "punctuation.definition.array.begin.ssl" } },
                    "endCaptures": { "0": { "name": "punctuation.definition.array.end.ssl" } },
                    "patterns": [{ "include": "$self" }]
                }
            ]
        },
        "built-in-literals": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.ssl",
                    "match": "(?i)(?<!\\w)\\.T\\.(?!\\w)"
                },
                {
                    "name": "constant.language.boolean.false.ssl",
                    "match": "(?i)(?<!\\w)\\.F\\.(?!\\w)"
                },
                {
                    "name": "constant.language.nil.ssl",
                    "match": "(?i)\\bNIL\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.scientific.ssl",
                    "match": "\\b([0-9]+\\.[0-9]+[eE][-]?[0-9]+)\\b"
                },
                {
                    "name": "constant.numeric.decimal.ssl",
                    "match": "\\b([0-9]+\\.[0-9]+)\\b"
                },
                {
                    "name": "constant.numeric.integer.ssl",
                    "match": "\\b([0-9]+)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.ssl",
                    "match": "(\\+|\\-|\\*|\\/|%|\\^)"
                },
                {
                    "name": "punctuation.accessor.ssl",
                    "match": ":"
                },
                {
                    "name": "punctuation.terminator.statement.ssl",
                    "match": ";"
                },
                {
                    "name": "punctuation.separator.comma.ssl",
                    "match": ","
                },
                {
                    "name": "punctuation.definition.parameters.begin.ssl",
                    "match": "\\("
                },
                {
                    "name": "punctuation.definition.parameters.end.ssl",
                    "match": "\\)"
                },
                {
                    "name": "punctuation.definition.dot.ssl",
                    "match": "\\."
                }
            ]
        },
        "logical-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.logical.and.ssl",
                    "match": "(?i)\\b\\.AND\\.\\b"
                },
                {
                    "name": "keyword.operator.logical.or.ssl",
                    "match": "(?i)\\b\\.OR\\.\\b"
                },
                {
                    "name": "keyword.operator.logical.not.ssl",
                    "match": "(?i)\\b\\.NOT\\.\\b"
                }
            ]
        },
        "comparison-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.equality.ssl",
                    "match": "(==|=)"
                },
                {
                    "name": "keyword.operator.comparison.inequality.ssl",
                    "match": "(!=)"
                },
                {
                    "name": "keyword.operator.comparison.relational.ssl",
                    "match": "(<=|>=|<|>)"
                }
            ]
        },
        "assignment-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.ssl",
                    "match": "(:=|\\+=|\\-=|\\*=|\\/=|\\^=)"
                }
            ]
        },
        "increment-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.increment.ssl",
                    "match": "(\\+\\+|\\-\\-)"
                }
            ]
        },
        "unary-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.unary.ssl",
                    "match": "(?<![a-zA-Z0-9_.:])(-|\\+|!)(?![=])"
                }
            ]
        },
        "property-access": {
            "patterns": [
                {
                    "name": "meta.property-access.ssl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(:)([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*\\()",
                    "captures": {
                        "1": { "name": "variable.object.ssl" },
                        "2": { "name": "punctuation.accessor.ssl" },
                        "3": { "name": "variable.property.ssl" }
                    }
                }
            ]
        },
        "method-calls": {
            "patterns": [
                {
                    "name": "meta.method-call.ssl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(:)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()",
                    "captures": {
                        "1": { "name": "variable.object.ssl" },
                        "2": { "name": "punctuation.accessor.ssl" },
                        "3": { "name": "support.function.method.ssl" }
                    }
                }
            ]
        },
        "indexers": {
            "patterns": [
                {
                    "name": "meta.array.access.ssl",
                    "begin": "\\[",
                    "end": "\\]",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.indexer.begin.ssl" }
                    },
                    "endCaptures": { "0": { "name": "punctuation.definition.indexer.end.ssl" } },
                    "patterns": [{ "include": "$self" }]
                }
            ]
        },
        "code-blocks": {
            "patterns": [
                {
                    "name": "meta.code-block.literal.ssl",
                    "begin": "(\\{\\|)",
                    "end": "(\\})",
                    "beginCaptures": {
                        "1": { "name": "punctuation.definition.code-block.begin.ssl" }
                    },
                    "endCaptures": {
                        "1": { "name": "punctuation.definition.code-block.end.ssl" }
                    },
                    "patterns": [
                        {
                            "begin": "(?<=^\\{\\|)\\s*",
                            "end": "\\|",
                            "endCaptures": {
                                "0": { "name": "punctuation.separator.code-block.parameters.ssl" }
                            },
                            "patterns": [
                                {
                                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                                    "name": "variable.parameter.code-block.ssl"
                                },
                                { "match": ",", "name": "punctuation.separator.comma.ssl" },
                                { "include": "$self" }
                            ]
                        },
                        {
                            "begin": "(?<=\\|)",
                            "end": "(?=\\})",
                            "patterns": [{ "include": "$self" }]
                        }
                    ]
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.ssl",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        }
    }
}
